{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "codetest": {
        "prefix": "ct",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "typedef long long ll;",
            "#include <ext/pb_ds/assoc_container.hpp>",
            "#include <ext/pb_ds/tree_policy.hpp>",
            "using namespace __gnu_pbds;",
            "#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>",
            "#define ordered_pair_set tree<pair<ll,ll>, null_type, less<pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update>",
            "void solve()",
            "{",
            "\t$0",
            "}",
            "int main()",
            "{",
            "\tios::sync_with_stdio(false);",
            "\tcin.tie(nullptr);",
            "\tint t;",
            "\tcin >> t;",
            "\twhile (t--) solve();",
            "\treturn 0;",
            "}"
        ]
    },
    "code": {
        "prefix": "cp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "typedef long long ll;",
            "#include <ext/pb_ds/assoc_container.hpp>",
            "#include <ext/pb_ds/tree_policy.hpp>",
            "using namespace __gnu_pbds;",
            "#define ordered_set tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>",
            "#define ordered_pair_set tree<pair<ll,ll>, null_type, less<pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update>",
            "void solve()",
            "{",
            "\t$0",
            "}",
            "int main()",
            "{",
            "\tios::sync_with_stdio(false);",
            "\tcin.tie(nullptr);",
            "\tsolve();",
            "\treturn 0;",
            "}"
        ]
    },
    "binary_exponents": {
        "prefix": "binpow",
        "body": [
            "ll binpow(ll a, ll b)",
            "{",
            "\tll res = 1;",
            "\twhile (b > 0)",
            "\t{",
            "\t\tif (b & 1)",
            "\t\t\tres *= a;",
            "\t\ta *= a;",
            "\t\tb >>= 1;",
            "\t}",
            "\treturn res;",
            "}"
        ]
    },
    "binary_exponents_mod": {
        "prefix": "binpowmod",
        "body": [
            "ll binpowmod(ll a, ll b, ll m)",
            "{",
            "\tll res = 1;",
            "\twhile (b > 0)",
            "\t{",
            "\t\tif (b & 1)",
            "\t\t{",
            "\t\t\tres *= a;",
            "\t\t\tres = res % m;",
            "\t\t}",
            "\t\ta *= a;",
            "\t\ta = a%m;",
            "\t\tb >>= 1;",
            "\t}",
            "\treturn res;",
            "}"
        ]
    }, 
    "Extended gcd": {
        "prefix": "extgcd",
        "body": [
            "ll gcd(ll a, ll b, ll &x, ll &y)",
            "{",
            "\tif (b == 0)",
            "\t{",
            "\t\tx = 1;",
            "\t\ty = 0;",
            "\t\treturn a;",
            "\t}",
            "\tll x1, y1;",
            "\tll d = gcd(b, a % b, x1, y1);",
            "\tx = y1;",
            "\ty = x1 - y1 * (a / b);",
            "\treturn d;",
            "}"
        ]
    },
    "num_len": {
        "prefix": "numlen",
        "body": [
            "ll num_len(ll n)",
            "{",
            "\tll d = 0;",
            "\twhile(n>0)",
            "\t{",
            "\t\td++;",
            "\t\tn/=10;",
            "\t}",
            "\treturn d;",
            "}"
        ]
    }
}